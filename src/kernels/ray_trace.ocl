// Common types

typedef struct __attribute__ ((packed)) _Ray
{
    float3 origin;
    float3 direction;
}Ray;


typedef struct __attribute__ ((packed)) _Matrix3x3
{
    float3 xaxis;
    float3 yaxis;
    float3 zaxis;
}Matrix3x3;

typedef struct __attribute__ ((packed)) _RenderInfo
{
    uint sphere_number;
    uint plane_number;
    uint light_number;
    uint height;
    uint width;
}RenderInfo;

typedef struct __attribute__ ((packed)) _Camera
{
    float3 pos;
    float3 dir;
    float fov;
}Camera;

typedef struct __attribute__ ((packed)) _Material
{
    float3 color;
    float reflectivity;
    float albedo;
}Material;

typedef struct __attribute__ ((packed)) _HitPoint
{
    float3 pos;
    float3 normal;
    float dist;
    float3 color;
    bool hit;
    float albedo;
}HitPoint;

// Buffer types

typedef struct __attribute__ ((packed)) _Sphere
{
    float3 pos;
    float radius;
    Material material;
}Sphere;

typedef struct __attribute__ ((packed)) _Plane
{
    float3 pos;
    float3 normal;
    Material material;
}Plane;

typedef struct __attribute__ ((packed)) _SunLight
{
    float3 direction;
    float3 color;
    float intensity;
}SunLight;


//Functions 

uint color_to_uint(float3 color) {
    return (uint)(color.x * 255) << 2*8 | (uint)(color.y * 255) << 1*8 | (uint)(color.z * 255);
}

float3 dot_m3_f3(Matrix3x3 mat, float3 v) {
    float3 result;

    result.x = dot(mat.xaxis,v);
    result.y = dot(mat.yaxis,v);
    result.z = dot(mat.zaxis,v);
    
    return result;
}

Matrix3x3 direction_to_matrix(float3 direction){
    Matrix3x3 mat;
    float3 up = (float3)(0,1,0);
    float3 zaxis = normalize(direction);
    float3 xaxis = normalize(cross(up,zaxis));
    float3 yaxis = normalize(cross(xaxis,zaxis));

    mat.xaxis = xaxis;
    mat.yaxis = yaxis;
    mat.zaxis = zaxis;
    
    return mat;
}

Ray create_ray(Camera camera, int x, int y, RenderInfo ri) {
    Ray r;
    uint height = ri.height;
    uint width = ri.width;
    float fov_adjustment = tan(radians(camera.fov) / 2.0);
    float aspect_ratio = width / height;
    float dir_y = ((((x + 0.5) / width) * 2.0 - 1.0) * aspect_ratio) * fov_adjustment;
    float dir_x = 1.0 - ((y + 0.5) / height) * 2.0;
    r.origin = camera.pos;
    r.direction = normalize(dot_m3_f3(direction_to_matrix(camera.dir), normalize((float3)(dir_x,dir_y,1))));
    return r;
}

// Hitting functions

HitPoint sphere_hit(Ray r, Sphere s) {
    HitPoint hp;
    //Create a line segment between the ray origin and the center of the sphere
    float3 l = s.pos - r.origin;
    //Use l as a hypotenuse and find the length of the adjacent side
    float adj2 = dot(l, r.direction);
    //Find the length-squared of the opposite side
    //This is equivalent to (but faster than) (l.length() * l.length()) - (adj2 * adj2)
    float d2 = dot(l,l) - (adj2 * adj2);
    //If that length-squared is less than radius squared, the ray intersects the sphere
    if(d2 < (s.radius * s.radius)){
        float3 hitpos = r.origin + normalize(r.direction) * sqrt(d2);
        hp.normal = hitpos - s.pos;
        hp.color = s.material.color;
        hp.hit = true;
        hp.dist = sqrt(d2);
        hp.pos = r.origin + normalize(r.direction) * sqrt(d2);
        hp.albedo = s.material.albedo;
        return hp;
    }
    else {
        hp.hit = false;
        hp.dist = 100000000;
        return hp;
    }
}
HitPoint plane_hit(Ray r, Plane p) {
    HitPoint hp;
    float3 normal = p.normal;
    float denom = dot(normal, r.direction); 
    if (denom > 1e-6) { 
        float3 p0l0 = (p.pos) - r.origin; 
        float t = dot(p0l0, normal) / denom; 
        if(t >= 0) {
            hp.hit = true;
            hp.normal = -normal;
            hp.color = (float3)(0.2,0.2,0.2);
            hp.dist = t;
            hp.pos = r.origin + normalize(r.direction) * t;
            hp.albedo = 3.0;
            return hp;
        }
    } 
    hp.hit = false;
    hp.dist = 100000000;
    return hp;
}

bool sphere_hit_simple(Ray r, Sphere s) {
    HitPoint hp;
    //Create a line segment between the ray origin and the center of the sphere
    float3 l = s.pos - r.origin;
    //Use l as a hypotenuse and find the length of the adjacent side
    float adj2 = dot(l, r.direction);
    //Find the length-squared of the opposite side
    //This is equivalent to (but faster than) (l.length() * l.length()) - (adj2 * adj2)
    float d2 = dot(l,l) - (adj2 * adj2);
    //If that length-squared is less than radius squared, the ray intersects the sphere
    if(d2 < (s.radius * s.radius)){
        return true;
    }
    return false;
}

// Color computing functions

float3 compute_shadowed(__global Sphere* spheres, SunLight light, uint sphere_number, HitPoint hp) {
    Ray r;
    r.origin = hp.pos + normalize(hp.normal) * 0.0001f ;
    bool shadowed = false;
    r.direction = normalize(-light.direction);
    for(int i = 1; i < sphere_number +1 ; i++) {
        if(sphere_hit_simple(r, spheres[0])){
            shadowed = true;
        }
    }
    if(shadowed)
        return (float3)(0,0,0);
    else {
        float intensity = max((float)0.0,(float)dot(hp.normal,-light.direction)) * 1.0f;//light.intensity;
        intensity = (float)dot((float3)hp.normal,(float3)-light.direction);
        float reflected = hp.albedo / (float)M_PI;

        return hp.color * intensity * light.color * intensity * reflected;
    }
}
//Compute color for each points
float3  compute_color(__global SunLight* lights, __global Sphere* spheres, __global Plane* planes, RenderInfo ri, HitPoint hp) {
    float3 color = (float3)(0,0,0);
    Ray r;
    r.origin = hp.pos;
    for(int i = 0; i < ri.light_number; i++){
        color = compute_shadowed(spheres,lights[i],ri.sphere_number,hp);
    }
    return color;

}

uint compute_ray_hit(__global SunLight* lights, __global Sphere* spheres, __global Plane* planes,RenderInfo ri, Ray r){
    HitPoint points[5];
    uint size = 0;
    for(int i = 1; i< ri.sphere_number+1;i++) {
        HitPoint sh = sphere_hit(r, spheres[i]);
        if(sh.hit){
            points[size] = sh;
            // float3 computed_color = compute_color(lights,spheres,planes,ris,sh);
            // points[size].color = computed_color;
            size++;
        }
    }
    for(int i = 0; i< ri.plane_number;i++) {
        HitPoint ph = plane_hit(r, planes[i]);
        if(ph.hit){
            points[size] = ph;
            points[size].color = compute_color(lights,spheres,planes,ri,ph);
            size++;
        }
    }
    
    float min = 100000000;
    float3 color = (float3)(0.4,0.4,0.8);
    for(int i = 0; i<size; i++) {
        if(points[i].dist < min) {
            color = points[i].color;
            min = points[i].dist;
        }
    }
    return color_to_uint(color);
    
}

__kernel
void ray_trace(__global uint* screen, Camera camera, RenderInfo ri, __global Sphere* spheres, __global Plane* planes, __global SunLight* sunlights){
    int index = get_global_id(0);
    
    int x = index / ri.height;
    int y = index % ri.width;
    Ray r = create_ray(camera, x,y, ri);
    // screen[0] = camera.pos.y;
    // int x = index / height;
    // int y = index % width;

    screen[index] = compute_ray_hit(sunlights,spheres,planes,ri,r);

}

